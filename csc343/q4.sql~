

SET search_path TO bnb, public;
DROP VIEW if exists HasRating cascade;
DROP VIEW if exists avgEachYear cascade;
DROP VIEW if exists SatisfiedOwnerMulYear cascade;
DROP VIEW if exists SatisfiedOwnerSingleYear cascade;
DROP VIEW if exists satisfiedOwner cascade;

-- homeowner that has rating in past ten years
CREATE VIEW HasRating AS
SELECT DISTINCT owner AS ratedowner
FROM TravelerRating NATURAL JOIN Listing
WHERE EXTRACT(YEAR FROM startdate) >= EXTRACT(YEAR FROM CURRENT_DATE) - 10
		AND EXTRACT(YEAR FROM startdate) < EXTRACT(YEAR FROM CURRENT_DATE);

-- average rate of every owner every year
CREATE VIEW avgEachYear AS
SELECT owner, year, avg(rating) AS avgRating
FROM (SELECT owner, CAST(EXTRACT(YEAR FROM startDate) AS INT) AS year, rating
		FROM TravelerRating NATURAL JOIN Listing
		WHERE EXTRACT(YEAR FROM startdate) >= EXTRACT(YEAR FROM CURRENT_DATE) - 10
				AND EXTRACT(YEAR FROM startdate) < EXTRACT(YEAR FROM CURRENT_DATE)
		GROUP BY owner, year, rating) ownerEachRating
GROUP BY owner, year;

CREATE VIEW notSatisfiedOwner AS
SELECT a1.owner AS notSatisfiedOwner
FROM avgEachYear a1, avgEachYear a2
WHERE a1.owner = a2.owner and a1.year < a2.year and a1.avgRating > a2.avgRating;

CREATE VIEW satisfiedOwner AS
(SELECT ratedowner AS satisfiedOwner FROM HasRating)
EXCEPT
(SELECT notSatisfiedOwner AS satisfiedOwner FROM notSatisfiedOwner);

SELECT CAST(count(DISTINCT satisfiedOwner)::numeric::float / count(DISTINCT ratedowner)::numeric::float * 100 AS INT) AS percentage
FROM SatisfiedOwner NATURAL JOIN HasRating;

